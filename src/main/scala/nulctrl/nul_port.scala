package freechips.rocketchip.nulctrl
import chisel3._

class nul_port extends Bundle {
    val csr_io_ptbr_mode = UInt(4.W)
    val csr_io_status_mpp = UInt(2.W)
    val dbg_d_done = Bool()
    val dbg_refill_data = UInt(64.W)
    val dbg_refill_one_beat = Bool()
    val dbg_refill_paddr = UInt(32.W)
    val dbg_refill_valid = Bool()
    val dmem_req_bits_addr = UInt(39.W)
    val dmem_req_bits_dprv = UInt(2.W)
    val dmem_req_valid = Bool()
    val dmem_resp_valid = Bool()
    val ex_pc_valid = Bool()
    val ex_reg_pc = UInt(39.W)
    val ex_reg_replay = Bool()
    val ex_reg_valid = Bool()
    val ex_rs0 = UInt(64.W)
    val ex_rs1 = UInt(64.W)
    val ibuf_io_inst0_bits_raw = UInt(32.W)
    val ibuf_io_inst0_bits_replay = Bool()
    val ibuf_io_inst0_valid = Bool()
    val icache_io_invalidate = Bool()
    val icache_io_req_bits_addr = UInt(32.W)
    val icache_io_req_valid = Bool()
    val icache_io_resp_bits_ae = Bool()
    val icache_io_resp_bits_data = UInt(32.W)
    val icache_io_resp_valid = Bool()
    val icache_io_s1_paddr = UInt(32.W)
    val imem_req_bits_pc = UInt(39.W)
    val imem_resp_ready = Bool()
    val imem_resp_valid = Bool()
    val inst64 = Bool()
    val inst64_ready = Bool()
    val mem_misprediction = Bool()
    val mem_npc = UInt(39.W)
    val mem_reg_inst = UInt(32.W)
    val mem_reg_load = Bool()
    val mem_reg_pc = UInt(39.W)
    val mem_reg_store = Bool()
    val mem_reg_valid = Bool()
    val mem_reg_xcpt = Bool()
    val nul_current_pos = UInt(5.W)
    val nul_push_pos = UInt(5.W)
    val nul_reg_flush0 = Bool()
    val nul_state = Bool()
    val nul_stop_fetch = Bool()
    val rf_wdata = UInt(64.W)
    val rf_wen = Bool()
    val status_priv = UInt(2.W)
    val take_pc_mem = Bool()
    val take_pc_wb = Bool()
    val tlb_io_req_bits_vaddr = UInt(39.W)
    val tlb_io_req_valid = Bool()
    val tlb_io_resp_miss = Bool()
    val tlb_io_resp_paddr = UInt(32.W)
    val wb_cause = UInt(5.W)
    val wb_reg_valid = Bool()
    val wb_valid = Bool()
    val wb_xcpt = Bool()
}